#!/usr/bin/env python
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è API –∫–ª—é—á–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è Railway.
–£–¥–∞–ª—è–µ—Ç –ª–∏—à–Ω–∏–µ –∫–∞–≤—ã—á–∫–∏, –¥–æ–±–∞–≤–ª—è–µ–º—ã–µ Railway –∫ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º –æ–∫—Ä—É–∂–µ–Ω–∏—è.
"""

import os
import sys
import re
import logging
from dotenv import load_dotenv, set_key

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', 
    level=logging.INFO
)
logger = logging.getLogger("fix_railway_env")

def is_railway():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø—É—â–µ–Ω –ª–∏ —Å–∫—Ä–∏–ø—Ç –≤ Railway
    """
    return os.getenv('RAILWAY_ENVIRONMENT') is not None

def fix_api_key_quotes():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç API –∫–ª—é—á Anthropic, —É–¥–∞–ª—è—è –ª–∏—à–Ω–∏–µ –∫–∞–≤—ã—á–∫–∏
    """
    print("\n========== –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï API –ö–õ–Æ–ß–ê –í RAILWAY ==========")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    load_dotenv()
    
    is_in_railway = is_railway()
    print(f"‚úì –û–∫—Ä—É–∂–µ–Ω–∏–µ: {'Railway' if is_in_railway else '–õ–æ–∫–∞–ª—å–Ω–æ–µ'}")
    
    # –ü–æ–ª—É—á–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–ª—é—á
    original_key = os.getenv("ANTHROPIC_API_KEY", "")
    
    if not original_key:
        print("‚ùå API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
        return False
    
    print(f"üìù –¢–µ–∫—É—â–∏–π API –∫–ª—é—á (–¥–ª–∏–Ω–∞: {len(original_key)})")
    print(f"üìù –ù–∞—á–∞–ª–æ –∫–ª—é—á–∞: {original_key[:15]}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–∞–≤—ã—á–µ–∫
    has_quotes = False
    new_key = original_key
    
    if original_key.startswith('"') and original_key.endswith('"'):
        print("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –¥–≤–æ–π–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ –∫–ª—é—á–∞")
        new_key = original_key.strip('"')
        has_quotes = True
    elif original_key.startswith("'") and original_key.endswith("'"):
        print("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ–¥–∏–Ω–∞—Ä–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ –∫–ª—é—á–∞")
        new_key = original_key.strip("'")
        has_quotes = True
    
    # –ï—Å–ª–∏ –∫–∞–≤—ã—á–µ–∫ –Ω–µ—Ç
    if not has_quotes:
        print("‚úÖ API –∫–ª—é—á –Ω–µ –∏–º–µ–µ—Ç –ª–∏—à–Ω–∏—Ö –∫–∞–≤—ã—á–µ–∫, –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
        return True
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–π –∫–ª—é—á
    print(f"üìù –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π API –∫–ª—é—á (–¥–ª–∏–Ω–∞: {len(new_key)})")
    print(f"üìù –ù–∞—á–∞–ª–æ –∫–ª—é—á–∞: {new_key[:15]}")
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ —Ç–µ–∫—É—â–µ–º –ø—Ä–æ—Ü–µ—Å—Å–µ
    os.environ["ANTHROPIC_API_KEY"] = new_key
    
    # –ï—Å–ª–∏ –º—ã –≤ Railway, —Å–æ–æ–±—â–∞–µ–º –æ –ø—Ä–æ—Ü–µ—Å—Å–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    if is_in_railway:
        print("\nüîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –í RAILWAY:")
        print("‚úÖ API –∫–ª—é—á –ò–°–ü–†–ê–í–õ–ï–ù –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞")
        print("‚úÖ –ë–æ—Ç –¥–æ–ª–∂–µ–Ω –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –≤ —ç—Ç–æ–º –∑–∞–ø—É—Å–∫–µ")
        print("‚ö†Ô∏è –î–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è –∏—Å–ø—Ä–∞–≤—å—Ç–µ –∫–ª—é—á –≤ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Railway:")
        print("1. –ó–∞–π–¥–∏—Ç–µ –≤ Variables –Ω–∞ —Å–∞–π—Ç–µ Railway")
        print("2. –£–¥–∞–ª–∏—Ç–µ –∫–∞–≤—ã—á–∫–∏ –∏–∑ ANTHROPIC_API_KEY")
    else:
        # –í –ª–æ–∫–∞–ª—å–Ω–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏ –º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å .env —Ñ–∞–π–ª
        try:
            env_path = ".env"
            if not os.path.exists(env_path):
                print(f"‚ùå –§–∞–π–ª {env_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return True  # –í—Å–µ —Ä–∞–≤–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º True, —Ç–∞–∫ –∫–∞–∫ –≤ —Ç–µ–∫—É—â–µ–º –ø—Ä–æ—Ü–µ—Å—Å–µ –∫–ª—é—á –∏—Å–ø—Ä–∞–≤–ª–µ–Ω
            
            set_key(env_path, "ANTHROPIC_API_KEY", new_key)
            print(f"‚úÖ API –∫–ª—é—á —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –≤ —Ñ–∞–π–ª–µ {env_path}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ API –∫–ª—é—á–∞ –≤ —Ñ–∞–π–ª–µ: {e}")
    
    return True

def check_api_syntax():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω –ª–∏ API –∫–ª—é—á
    """
    api_key = os.getenv("ANTHROPIC_API_KEY", "")
    
    if not api_key:
        print("‚ùå API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω—ã Railway
    special_chars = ['"', "'", "\\", "\n", "\r", "\t"]
    found_chars = []
    
    for char in special_chars:
        if char in api_key:
            found_chars.append(char)
    
    if found_chars:
        print(f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ API –∫–ª—é—á–µ: {', '.join(repr(c) for c in found_chars)}")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª–æ –∫–ª—é—á–∞
    if not (api_key.startswith("sk-") or api_key.startswith("sk-ant-api")):
        print(f"‚ö†Ô∏è API –∫–ª—é—á –∏–º–µ–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—Ä–µ—Ñ–∏–∫—Å: {api_key[:10]}")
        return False
    
    print("‚úÖ API –∫–ª—é—á –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å")
    return True

if __name__ == "__main__":
    if fix_api_key_quotes():
        print("\n‚úì –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ API –∫–ª—é—á–∞:")
        check_api_syntax()
        print("\n‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —è–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Railway
        if is_railway():
            print("\n======= –†–ï–ó–£–õ–¨–¢–ê–¢ –†–ê–ë–û–¢–´ –°–ö–†–ò–ü–¢–ê =======")
            print("‚úÖ –ö–∞–≤—ã—á–∫–∏ –∏–∑ API –∫–ª—é—á–∞ —É–¥–∞–ª–µ–Ω—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞")
            print("‚úÖ –ö–ª—é—á –∏—Å–ø—Ä–∞–≤–ª–µ–Ω –≤ –ø–∞–º—è—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞")
            print("ü§ñ –ë–æ—Ç –¥–æ–ª–∂–µ–Ω –Ω–æ—Ä–º–∞–ª—å–Ω–æ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –≤ —ç—Ç–æ–º –∑–∞–ø—É—Å–∫–µ")
            print("=========================================")
    else:
        print("\n‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏") 