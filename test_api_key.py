#!/usr/bin/env python
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–∞ Anthropic
"""

import os
import sys
import asyncio
from dotenv import load_dotenv
import anthropic

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–æ–¥—É–ª—å
from anthropic_helper import get_api_key_with_prefix, create_anthropic_client

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

async def test_api_key():
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API –∫–ª—é—á–∞"""
    print("======== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –∫–ª—é—á–∞ Anthropic ========")
    
    # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø—Ä–µ—Ñ–∏–∫—Å–æ–º
    api_key = get_api_key_with_prefix()
    
    if not api_key:
        print("‚ùå API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return False
    
    print(f"üìù API –∫–ª—é—á –Ω–∞–π–¥–µ–Ω (–¥–ª–∏–Ω–∞: {len(api_key)})")
    print(f"üìù –ù–∞—á–∞–ª–æ –∫–ª—é—á–∞: {api_key[:15]}...")
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
    client, method_name, error = await create_anthropic_client()
    
    if error:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞: {error}")
        return False
    
    print(f"‚úÖ –ö–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É—è –º–µ—Ç–æ–¥: {method_name}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º API-–∑–∞–ø—Ä–æ—Å
    print("\nüîç –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∫ API...")
    
    try:
        if method_name == "completion":
            # –°—Ç–∞—Ä—ã–π API
            response = client.completion(
                prompt="\n\nHuman: –ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?\n\nAssistant:",
                model="claude-2",
                max_tokens_to_sample=100,
                temperature=0.7
            )
            result = response.completion
        else:
            # –ù–æ–≤—ã–π API
            messages = [
                {
                    "role": "user", 
                    "content": [
                        {
                            "type": "text",
                            "text": "–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?"
                        }
                    ]
                }
            ]
            response = client.messages.create(
                model="claude-3-opus-20240229",
                max_tokens=100,
                messages=messages
            )
            result = response.content[0].text
        
        print(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        print(f"üìù –û—Ç–≤–µ—Ç –æ—Ç API: {result[:100]}...")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return False

if __name__ == "__main__":
    asyncio.run(test_api_key()) 