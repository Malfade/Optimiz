#!/usr/bin/env python
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è API –∫–ª—é—á–∞ Anthropic.
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç –∫–ª—é—á–∞ –±–µ–∑ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–≤–æ–¥–∞.
"""

import os
import sys
import re
import json
import requests
from dotenv import load_dotenv, set_key

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

def is_railway():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø—É—â–µ–Ω –ª–∏ —Å–∫—Ä–∏–ø—Ç –≤ Railway"""
    return os.getenv('RAILWAY_ENVIRONMENT') is not None

def fix_api_key_format():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç API –∫–ª—é—á–∞ Anthropic –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–æ–≤—ã–º API Claude 3"""
    print("\n========== –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï API –ö–õ–Æ–ß–ê ANTHROPIC ==========")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤ –∫–∞–∫–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏ –∑–∞–ø—É—â–µ–Ω —Å–∫—Ä–∏–ø—Ç
    is_cloud = is_railway()
    print(f"üåê –û–∫—Ä—É–∂–µ–Ω–∏–µ: {'Railway' if is_cloud else '–õ–æ–∫–∞–ª—å–Ω–æ–µ'}")
    
    # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á
    original_key = os.getenv("ANTHROPIC_API_KEY", "")
    
    if not original_key:
        print("‚ùå API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
        return False
    
    # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª—é—á–µ
    print(f"üìù –¢–µ–∫—É—â–∏–π API –∫–ª—é—á (–¥–ª–∏–Ω–∞: {len(original_key)})")
    print(f"üìù –ù–∞—á–∞–ª–æ –∫–ª—é—á–∞: {original_key[:15]}")
    
    # –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞ –∫–ª—é—á–∞
    if original_key.startswith("sk-ant-api"):
        print("‚úì –ö–ª—é—á —É–∂–µ –≤ –Ω–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ Claude 3 (sk-ant-api...)")
        is_new_format = True
    elif original_key.startswith("sk-"):
        print("‚ö†Ô∏è –ö–ª—é—á –≤ —Å—Ç–∞—Ä–æ–º —Ñ–æ—Ä–º–∞—Ç–µ Claude 2 (sk-...)")
        is_new_format = False
    else:
        print("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–ª—é—á–∞! –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—Ä—É–≥–∏—Ö –ø—Ä–æ–±–ª–µ–º...")
        is_new_format = False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∫–∞–≤—ã—á–µ–∫
    new_key = original_key
    if new_key.startswith('"') and new_key.endswith('"'):
        print("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –¥–≤–æ–π–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ –∫–ª—é—á–∞")
        new_key = new_key.strip('"')
    elif new_key.startswith("'") and new_key.endswith("'"):
        print("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ–¥–∏–Ω–∞—Ä–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ –∫–ª—é—á–∞")
        new_key = new_key.strip("'")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã
    if new_key != new_key.strip():
        print("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –≤ –∫–ª—é—á–µ")
        new_key = new_key.strip()
    
    # –ï—Å–ª–∏ –∫–ª—é—á –∏–∑–º–µ–Ω–∏–ª—Å—è, —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º
    if new_key != original_key:
        print(f"üìù –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π API –∫–ª—é—á (–¥–ª–∏–Ω–∞: {len(new_key)})")
        print(f"üìù –ù–∞—á–∞–ª–æ –∫–ª—é—á–∞: {new_key[:15]}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ —Ç–µ–∫—É—â–µ–º –ø—Ä–æ—Ü–µ—Å—Å–µ
        os.environ["ANTHROPIC_API_KEY"] = new_key
        
        # –í –ª–æ–∫–∞–ª—å–Ω–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏ –º–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –æ–±–Ω–æ–≤–∏—Ç—å .env —Ñ–∞–π–ª
        if not is_cloud:
            env_path = ".env"
            if os.path.exists(env_path):
                set_key(env_path, "ANTHROPIC_API_KEY", new_key)
                print(f"‚úÖ API –∫–ª—é—á —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –≤ —Ñ–∞–π–ª–µ {env_path}")
            else:
                with open(env_path, "w") as f:
                    f.write(f"ANTHROPIC_API_KEY={new_key}\n")
                print(f"‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª {env_path} —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º API –∫–ª—é—á–æ–º")
    else:
        print("‚úì API –∫–ª—é—á –Ω–µ —Ç—Ä–µ–±—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–π –∫–ª—é—á –Ω–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å
    print("\nüì° –ü—Ä–æ–≤–µ—Ä—è—é API –∫–ª—é—á –Ω–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å...")
    
    # –î–ª—è –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –∫–ª—é—á–∞ (Claude 3)
    if new_key.startswith("sk-ant-api"):
        url = "https://api.anthropic.com/v1/messages"
        headers = {
            "x-api-key": new_key,
            "anthropic-version": "2023-06-01",
            "content-type": "application/json"
        }
        data = {
            "model": "claude-3-haiku-20240307",
            "max_tokens": 30,
            "messages": [
                {"role": "user", "content": "Say 'API key is working' in Russian"}
            ]
        }
    # –î–ª—è —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –∫–ª—é—á–∞ (Claude 2)
    else:
        url = "https://api.anthropic.com/v1/complete"
        headers = {
            "x-api-key": new_key,
            "anthropic-version": "2023-06-01",
            "content-type": "application/json"
        }
        data = {
            "model": "claude-2.0",
            "max_tokens_to_sample": 30,
            "prompt": "\n\nHuman: Say 'API key is working' in Russian\n\nAssistant: "
        }
    
    try:
        response = requests.post(url, headers=headers, json=data, timeout=30)
        
        # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—Ä–æ—Å–µ
        print(f"üì§ URL: {url}")
        print(f"üì§ –ú–µ—Ç–æ–¥ API: {'messages (Claude 3)' if new_key.startswith('sk-ant-api') else 'complete (Claude 2)'}")
        print(f"üì§ –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        
        # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω
        if response.status_code == 200:
            print("‚úÖ API –∫–ª—é—á —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
            
            try:
                resp_data = response.json()
                content = ""
                if "content" in resp_data:
                    for item in resp_data["content"]:
                        if item.get("type") == "text":
                            content += item.get("text", "")
                elif "completion" in resp_data:
                    content = resp_data["completion"]
                
                if content:
                    print(f"üì• –û—Ç–≤–µ—Ç API: {content.strip()}")
            except:
                print("üì• –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç")
            
            print("\n‚úÖ API –∫–ª—é—á –∏—Å–ø—Ä–∞–≤–ª–µ–Ω –∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            if is_cloud:
                print("‚ö†Ô∏è –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –≤ Railway –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤—É–µ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞.")
                print("‚ö†Ô∏è –î–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è –∏—Å–ø—Ä–∞–≤—å—Ç–µ –∫–ª—é—á –≤ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Railway.")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code}")
            print("\nüì• –û—Ç–≤–µ—Ç API:")
            try:
                resp_data = response.json()
                print(json.dumps(resp_data, indent=2, ensure_ascii=False))
            except:
                print(response.text[:200])
            
            # –ê–Ω–∞–ª–∏–∑ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
            if response.status_code == 401:
                print("\n‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (401):")
                print("- API –∫–ª—é—á –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ –æ—Ç–æ–∑–≤–∞–Ω")
                print("- –í–æ–∑–º–æ–∂–Ω–æ, –∫–ª—é—á –∏–º–µ–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
                print("- –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π –∫–ª—é—á –≤ –∫–æ–Ω—Å–æ–ª–∏ Anthropic")
                print("- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–∫—Ä–∏–ø—Ç get_new_key.py –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–∞")
            
            if is_cloud:
                print("\n‚ö†Ô∏è –í Railway –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è API –∫–ª—é—á–∞:")
                print("1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Railway")
                print("2. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø—Ä–æ–µ–∫—Ç –∏ —Å–µ—Ä–≤–∏—Å")
                print("3. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤–æ –≤–∫–ª–∞–¥–∫—É Variables")
                print("4. –û–±–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é ANTHROPIC_API_KEY –Ω–æ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º")
                print("5. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–∏—Å")
            
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        if is_cloud:
            print("\n‚ö†Ô∏è –í Railway –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è API –∫–ª—é—á–∞:")
            print("1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Railway")
            print("2. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø—Ä–æ–µ–∫—Ç –∏ —Å–µ—Ä–≤–∏—Å")
            print("3. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤–æ –≤–∫–ª–∞–¥–∫—É Variables")
            print("4. –û–±–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é ANTHROPIC_API_KEY –Ω–æ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º")
            print("5. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–∏—Å")
        return False

if __name__ == "__main__":
    fix_api_key_format() 