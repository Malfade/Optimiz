#!/usr/bin/env python
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ API –∫–ª—é—á–∞ Anthropic —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º.
–ü–æ–º–æ–≥–∞–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–ª—é—á –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –±–æ—Ç–µ.
"""

import os
import sys
import re
import json
import requests
from dotenv import load_dotenv, set_key

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

def is_railway():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø—É—â–µ–Ω –ª–∏ —Å–∫—Ä–∏–ø—Ç –≤ Railway"""
    return os.getenv('RAILWAY_ENVIRONMENT') is not None

def get_new_api_key():
    """–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –ø–æ–ª—É—á–µ–Ω–∏—é –Ω–æ–≤–æ–≥–æ API –∫–ª—é—á–∞ –∏ –µ–≥–æ –ø—Ä–æ–≤–µ—Ä–∫–∞"""
    print("\n========== –ü–û–õ–£–ß–ï–ù–ò–ï –ù–û–í–û–ì–û API –ö–õ–Æ–ß–ê ANTHROPIC ==========")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤ –∫–∞–∫–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏ –∑–∞–ø—É—â–µ–Ω —Å–∫—Ä–∏–ø—Ç
    is_cloud = is_railway()
    print(f"üåê –û–∫—Ä—É–∂–µ–Ω–∏–µ: {'Railway' if is_cloud else '–õ–æ–∫–∞–ª—å–Ω–æ–µ'}")
    
    if is_cloud:
        print("\n‚ö†Ô∏è –í—ã –∑–∞–ø—É—Å—Ç–∏–ª–∏ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –≤ Railway.")
        print("‚ö†Ô∏è –í –æ–±–ª–∞—á–Ω–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∫–ª—é—á.")
        print("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å –∫–ª—é—á –≤ Railway:")
        print("\n1. –ó–∞–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç https://console.anthropic.com/")
        print("2. –í–æ–π–¥–∏—Ç–µ –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π")
        print("3. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª API Keys")
        print("4. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –∫–ª—é—á (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)")
        print("5. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–ª—é—á (–æ–Ω –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å 'sk-ant-api' –¥–ª—è Claude 3)")
        print("6. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Railway")
        print("7. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø—Ä–æ–µ–∫—Ç –∏ —Å–µ—Ä–≤–∏—Å")
        print("8. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤–æ –≤–∫–ª–∞–¥–∫—É Variables")
        print("9. –û–±–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é ANTHROPIC_API_KEY –Ω–æ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º")
        print("10. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–∏—Å\n")
        return
    
    # –í –ª–æ–∫–∞–ª—å–Ω–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏ - –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–ª—é—á–∞
    print("\nüìå –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –ø–æ–ª—É—á–µ–Ω–∏—é –Ω–æ–≤–æ–≥–æ API –∫–ª—é—á–∞:")
    print("1. –ó–∞–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç https://console.anthropic.com/")
    print("2. –í–æ–π–¥–∏—Ç–µ –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π")
    print("3. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª API Keys")
    print("4. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –∫–ª—é—á (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)")
    print("5. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–ª—é—á –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –µ–≥–æ –Ω–∏–∂–µ\n")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–ª—é—á
    current_key = os.getenv("ANTHROPIC_API_KEY", "")
    if current_key:
        print(f"üìù –¢–µ–∫—É—â–∏–π API –∫–ª—é—á (–¥–ª–∏–Ω–∞: {len(current_key)})")
        print(f"üìù –ù–∞—á–∞–ª–æ –∫–ª—é—á–∞: {current_key[:15]}")
    else:
        print("üìù –¢–µ–∫—É—â–∏–π API –∫–ª—é—á –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –∫–ª—é—á
    new_key = input("\nüîë –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π API –∫–ª—é—á: ").strip()
    
    if not new_key:
        print("‚ùå –í—ã –Ω–µ –≤–≤–µ–ª–∏ –∫–ª—é—á. –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –∫–ª—é—á–∞
    if new_key.startswith("sk-ant-api"):
        print("‚úì –§–æ—Ä–º–∞—Ç –∫–ª—é—á–∞: –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç (sk-ant-api...)")
        new_format = True
    elif new_key.startswith("sk-"):
        print("‚úì –§–æ—Ä–º–∞—Ç –∫–ª—é—á–∞: –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç (sk-...)")
        new_format = False
    else:
        print("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–ª—é—á–∞! –ö–ª—é—á –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å 'sk-' –∏–ª–∏ 'sk-ant-api'")
        retry = input("–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –æ—à–∏–±–∫—É —Ñ–æ—Ä–º–∞—Ç–∞? (y/n): ").strip().lower()
        if retry != 'y':
            return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á
    print("\nüì° –ü—Ä–æ–≤–µ—Ä—è—é –Ω–æ–≤—ã–π API –∫–ª—é—á...")
    
    # –î–ª—è –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –∫–ª—é—á–∞ (Claude 3)
    if new_key.startswith("sk-ant-api"):
        url = "https://api.anthropic.com/v1/messages"
        headers = {
            "x-api-key": new_key,
            "anthropic-version": "2023-06-01",
            "content-type": "application/json"
        }
        data = {
            "model": "claude-3-haiku-20240307",
            "max_tokens": 30,
            "messages": [
                {"role": "user", "content": "Say 'API key is working' in Russian"}
            ]
        }
    # –î–ª—è —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –∫–ª—é—á–∞
    else:
        url = "https://api.anthropic.com/v1/complete"
        headers = {
            "x-api-key": new_key,
            "anthropic-version": "2023-06-01",
            "content-type": "application/json"
        }
        data = {
            "model": "claude-2.0",
            "max_tokens_to_sample": 30,
            "prompt": "\n\nHuman: Say 'API key is working' in Russian\n\nAssistant: "
        }
    
    try:
        response = requests.post(url, headers=headers, json=data, timeout=30)
        
        # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—Ä–æ—Å–µ
        print(f"üì§ –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        
        # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω
        if response.status_code == 200:
            print("‚úÖ API –∫–ª—é—á —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª—é—á –≤ .env —Ñ–∞–π–ª
            env_path = ".env"
            if os.path.exists(env_path):
                set_key(env_path, "ANTHROPIC_API_KEY", new_key)
                print(f"‚úÖ API –∫–ª—é—á —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª {env_path}")
            else:
                with open(env_path, "w") as f:
                    f.write(f"ANTHROPIC_API_KEY={new_key}\n")
                print(f"‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª {env_path} —Å API –∫–ª—é—á–æ–º")
                
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ —Ç–µ–∫—É—â–µ–º –ø—Ä–æ—Ü–µ—Å—Å–µ
            os.environ["ANTHROPIC_API_KEY"] = new_key
            
            print("‚úÖ API –∫–ª—é—á —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω!")
            print("\nü§ñ –¢–µ–ø–µ—Ä—å –±–æ—Ç –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code}")
            print("\nüì• –û—Ç–≤–µ—Ç API:")
            try:
                resp_data = response.json()
                print(json.dumps(resp_data, indent=2, ensure_ascii=False))
            except:
                print(response.text[:200])
            
            # –ê–Ω–∞–ª–∏–∑ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
            if response.status_code == 401:
                print("\n‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (401):")
                print("- API –∫–ª—é—á –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ –æ—Ç–æ–∑–≤–∞–Ω")
                print("- –í–æ–∑–º–æ–∂–Ω–æ, –∫–ª—é—á –∏–º–µ–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
                print("- –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π –∫–ª—é—á –≤ –∫–æ–Ω—Å–æ–ª–∏ Anthropic")
            
            retry = input("\n–•–æ—Ç–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç—Ç–æ—Ç –∫–ª—é—á –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –æ—à–∏–±–∫—É? (y/n): ").strip().lower()
            if retry == 'y':
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª—é—á –≤ .env —Ñ–∞–π–ª
                env_path = ".env"
                if os.path.exists(env_path):
                    set_key(env_path, "ANTHROPIC_API_KEY", new_key)
                    print(f"‚úÖ API –∫–ª—é—á —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª {env_path} (–Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –æ—à–∏–±–∫—É)")
                else:
                    with open(env_path, "w") as f:
                        f.write(f"ANTHROPIC_API_KEY={new_key}\n")
                    print(f"‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª {env_path} —Å API –∫–ª—é—á–æ–º (–Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –æ—à–∏–±–∫—É)")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ —Ç–µ–∫—É—â–µ–º –ø—Ä–æ—Ü–µ—Å—Å–µ
                os.environ["ANTHROPIC_API_KEY"] = new_key
                return True
            
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        
        retry = input("\n–•–æ—Ç–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç—Ç–æ—Ç –∫–ª—é—á –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –æ—à–∏–±–∫—É? (y/n): ").strip().lower()
        if retry == 'y':
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª—é—á –≤ .env —Ñ–∞–π–ª
            env_path = ".env"
            if os.path.exists(env_path):
                set_key(env_path, "ANTHROPIC_API_KEY", new_key)
                print(f"‚úÖ API –∫–ª—é—á —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª {env_path} (–Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –æ—à–∏–±–∫—É)")
            else:
                with open(env_path, "w") as f:
                    f.write(f"ANTHROPIC_API_KEY={new_key}\n")
                print(f"‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª {env_path} —Å API –∫–ª—é—á–æ–º (–Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –æ—à–∏–±–∫—É)")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ —Ç–µ–∫—É—â–µ–º –ø—Ä–æ—Ü–µ—Å—Å–µ
            os.environ["ANTHROPIC_API_KEY"] = new_key
            return True
        
        return False

if __name__ == "__main__":
    get_new_api_key() 