#!/usr/bin/env python
"""
–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–º–ø–æ—Ä—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ anthropic –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ 
—Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏ –æ–±—Ö–æ–¥–∞ –ø—Ä–æ–±–ª–µ–º—ã proxies.
"""
import os
import sys
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–º–∏—Ç–∞—Ü–∏—è Railway - —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
def simulate_railway_env():
    """–ò–º–∏—Ç–∏—Ä—É–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Railway"""
    os.environ['RAILWAY_ENVIRONMENT'] = 'development'
    os.environ['RAILWAY_SERVICE_NAME'] = 'test-service'
    # –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏ —É—Å—Ç–∞–Ω–æ–≤–∏–º –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    os.environ['HTTP_PROXY'] = ''
    os.environ['HTTPS_PROXY'] = ''
    logger.info("–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –∏–º–∏—Ç–∞—Ü–∏—è —Å—Ä–µ–¥—ã Railway")

# –¢–µ—Å—Ç 1: –° –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–∞—Ç—á–∞ fix_railway_anthropic
def test_with_patch():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞—Ç—á–∞ fix_railway_anthropic"""
    logger.info("=== –¢–µ—Å—Ç 1: –° –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–∞—Ç—á–∞ fix_railway_anthropic ===")
    try:
        import fix_railway_anthropic
        logger.info("–ü–∞—Ç—á —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        
        import anthropic
        logger.info(f"–ú–æ–¥—É–ª—å anthropic —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        logger.info(f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –º–æ–¥—É–ª—è anthropic: {dir(anthropic)}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
        try:
            if hasattr(anthropic, 'Anthropic'):
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ–∫—Å–µ–π
                client = anthropic.Anthropic(api_key="test_key", proxies={"http://": None})
                logger.info("‚úÖ –ö–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ Anthropic")
            elif hasattr(anthropic, 'Client'):
                client = anthropic.Client(api_key="test_key", proxies={"http://": None})
                logger.info("‚úÖ –ö–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ Client")
            else:
                logger.warning("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –∫–ª–∞—Å—Å Anthropic –∏–ª–∏ Client")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞: {e}")
            return False
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–µ —Å –ø–∞—Ç—á–µ–º: {e}")
        return False

# –¢–µ—Å—Ç 2: –° –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º safe_anthropic
def test_with_safe_anthropic():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ safe_anthropic"""
    logger.info("=== –¢–µ—Å—Ç 2: –° –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º safe_anthropic ===")
    try:
        import safe_anthropic as anthropic
        logger.info("–ú–æ–¥—É–ª—å safe_anthropic —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
        try:
            if hasattr(anthropic, 'Anthropic'):
                client = anthropic.Anthropic(api_key="test_key", proxies={"http://": None})
                logger.info("‚úÖ –ö–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ Anthropic")
            elif hasattr(anthropic, 'Client'):
                client = anthropic.Client(api_key="test_key", proxies={"http://": None})
                logger.info("‚úÖ –ö–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ Client")
            elif hasattr(anthropic, 'create_client'):
                client = anthropic.create_client(api_key="test_key")
                logger.info("‚úÖ –ö–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ create_client")
            else:
                logger.warning("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π –º–µ—Ç–æ–¥ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞: {e}")
            return False
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–µ —Å safe_anthropic: {e}")
        return False

# –¢–µ—Å—Ç 3: –° –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º anthropic_wrapper
def test_with_anthropic_wrapper():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ anthropic_wrapper"""
    logger.info("=== –¢–µ—Å—Ç 3: –° –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º anthropic_wrapper ===")
    try:
        import anthropic_wrapper as anthropic
        logger.info("–ú–æ–¥—É–ª—å anthropic_wrapper —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
        try:
            if hasattr(anthropic, 'Anthropic'):
                client = anthropic.Anthropic(api_key="test_key", proxies={"http://": None})
                logger.info("‚úÖ –ö–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ Anthropic")
            elif hasattr(anthropic, 'create_client'):
                client = anthropic.create_client(api_key="test_key")
                logger.info("‚úÖ –ö–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ create_client")
            else:
                logger.warning("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π –º–µ—Ç–æ–¥ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞: {e}")
            return False
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–µ —Å anthropic_wrapper: {e}")
        return False

# –¢–µ—Å—Ç 4: –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∏–∑ main.py
def test_main_approach():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∏–∑ main.py"""
    logger.info("=== –¢–µ—Å—Ç 4: –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∏–∑ main.py ===")
    try:
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞—Ç—á –¥–ª—è Railway –ø–µ—Ä–µ–¥ –∏–º–ø–æ—Ä—Ç–æ–º anthropic
        import fix_railway_anthropic
        logger.info("–ü–∞—Ç—á –¥–ª—è Railway —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω")
        
        # –ó–∞—Ç–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é –≤–µ—Ä—Å–∏—é anthropic
        try:
            # –ü—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω—É—é –æ–±–µ—Ä—Ç–∫—É
            import safe_anthropic as anthropic
            logger.info("–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–∞—è –≤–µ—Ä—Å–∏—è anthropic")
        except ImportError:
            try:
                # –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥—É—é –æ–±–µ—Ä—Ç–∫—É
                import anthropic_wrapper as anthropic
                logger.info("–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –æ–±–µ—Ä—Ç–∫–∞ anthropic_wrapper")
            except ImportError:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –±–∏–±–ª–∏–æ—Ç–µ–∫—É
                logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –æ–±–µ—Ä—Ç–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –±–∏–±–ª–∏–æ—Ç–µ–∫—É")
                import anthropic
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
        try:
            if hasattr(anthropic, 'Anthropic'):
                client = anthropic.Anthropic(api_key="test_key", proxies={"http://": None})
                logger.info("‚úÖ –ö–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ Anthropic")
            elif hasattr(anthropic, 'create_client'):
                client = anthropic.create_client(api_key="test_key")
                logger.info("‚úÖ –ö–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ create_client")
            else:
                logger.warning("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π –º–µ—Ç–æ–¥ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞: {e}")
            return False
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –ø–æ–¥—Ö–æ–¥–µ: {e}")
        return False

if __name__ == "__main__":
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –∏–º–ø–æ—Ä—Ç–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ anthropic")
    
    # –ò–º–∏—Ç–∏—Ä—É–µ–º —Å—Ä–µ–¥—É Railway
    simulate_railway_env()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    results = {
        "–¢–µ—Å—Ç 1 (–ø–∞—Ç—á)": test_with_patch(),
        "–¢–µ—Å—Ç 2 (safe_anthropic)": test_with_safe_anthropic(),
        "–¢–µ—Å—Ç 3 (anthropic_wrapper)": test_with_anthropic_wrapper(),
        "–¢–µ—Å—Ç 4 (–ø–æ–¥—Ö–æ–¥ –∏–∑ main.py)": test_main_approach()
    }
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤:")
    for test_name, result in results.items():
        print(f"{test_name}: {'‚úÖ –£—Å–ø–µ—à–Ω–æ' if result else '‚ùå –û—à–∏–±–∫–∞'}")
    
    # –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if all(results.values()):
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        sys.exit(0)
    else:
        print("\n‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã!")
        sys.exit(1) 